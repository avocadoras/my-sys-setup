#+STARTUP: overview hidestars
#+AUTHOR: Jonathan
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :comments no :results silent

* General Emacs Setup
#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-startup-message t ; don't show default emacs startup screen
   window-combination-resize t            ; Resize windows proportionally
   display-time-default-load-average nil  ; don't show system load time in modeline
   indent-tabs-mode nil                   ; stop using tabs to indent
   indent-tabs-mode nil 			        ; use spaces not tab
   tab-width 4 				            ; change default tab width
   )

  ;; toggle features that are turned off in a fresh Emacs install
  (put 'downcase-region 'disabled nil) ; allow me to use C-x C-l (downcase region)
  (put 'upcase-region 'disabled nil) ; allow me to use C-x C-u (capitalize
  (put 'narrow-to-region 'disabled nil) 	; allow me to narrow to region

  ;; Tweaking Registers

  ;; Useful Register setup when appending/prepending
  (setq register-separator ?+)
  (set-register register-separator "\n\n")

  ;; Reserve `z' register to jump to config quickly
  (set-register ?z '(file . "~/my-sys-setup/emacs-pkgs-config.org"))

  ;; Useful functionality
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ; remove trailing whitespace on save
  (add-hook 'after-save-hook
    ;; Emacs will make a script file executable if it decides it is one
    'executable-make-buffer-file-executable-if-script-p)

  ;; Extra manuals
  (add-to-list 'Info-default-directory-list "~/Documents/Info")

#+END_SRC
* Changes to default Emacs UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)			; remove toolbar
  (menu-bar-mode -1)			; delete menu bar
  (scroll-bar-mode -1) 			; remove scroll bar

  ;; Prompts that require 'yes' or 'no' accept 'y' or 'n'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Remember cursor position, for emacs 25.1 or later
  (save-place-mode 1)

  (display-time-mode 1) ; display time in modeline

  (setq-default ns-pop-up-frames nil       ; open files in an exising frame
    )

  (blink-cursor-mode 0)			; stop cursor blinking

  (load-theme 'tsdh-light t)

  (global-hl-line-mode +1)		; highlight current active line
  (set-face-background 'hl-line "#f0f5ff")  ; Change default hl-line face
#+END_SRC
* Custom Prefix Keys
Custom prefix keys for things I use often
#+BEGIN_SRC emacs-lisp

  ;; jump to file useful for opening imgs in html 'img' tag
  (global-set-key (kbd "<f8>") 'find-file-at-point)
  (global-set-key (kbd "<C-M-return>") 'delete-other-windows)

  ;; s-z for commonly used keys
  (define-prefix-command 'my-super-z-map)
  (global-set-key (kbd "C-z") 'my-super-z-map)

  ;; (define-key my-super-z-map (kbd "f") 'counsel-rg)	   ; find in current working directory

  (define-key my-super-z-map (kbd "o") 'browse-url-at-point)
  (define-key my-super-z-map (kbd "r") 'revert-buffer)
  (define-key my-super-z-map (kbd "a") 'add-file-local-variable-prop-line)
#+END_SRC
* Dashboard
#+begin_src emacs-lisp
  (dashboard-setup-startup-hook)

  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5)))
#+end_src

* Ivy
#+BEGIN_SRC emacs-lisp
  (counsel-mode)

  ;; (setq counsel-grep-base-command
  ;;     "rg -i -M 120 --no-heading --line-number --color never '%s' %s")

  ;; Ivy
  (setq ivy-use-virtual-buffers t
        enable-recursive-minibuffers t
        ivy-count-format "%d/%d "
        ivy-display-style 'fancy)

  (ivy-mode 1)

  ;; Bind keys

  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)

  (global-set-key (kbd "s-s") 'counsel-grep-or-swiper)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c f") 'counsel-git)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)

  ;; Custom prefix key
  (define-key my-super-z-map (kbd "f") 'swiper) ; fuzy search in files

  ;; Ivy Rich
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

  ;; Ivy Actions

    ;;; == Define actions
  (defun my-comment-line-action (_line)
    "Comment or uncomment currently selected LINE.
       This function is intended as a `swiper' action."
    (comment-or-uncomment-region (line-beginning-position)
                                 (line-end-position)))

  (defun my-kill-line-action (_line)
    "Kill currently selected LINE.
       This function is intended as a `swiper' action."
    (kill-whole-line 1))

    ;;; == Add actions
  (ivy-add-actions
   'swiper
   '(;;(";" my-comment-line-action "comment line")
     ("k" my-kill-line-action "kill whole line")))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies (quote always) ; “always” means no asking
        dired-recursive-deletes (quote top) ; “top” means ask once
        dired-dwim-target t)

  (add-hook 'dired-mode-hook '(lambda ()
                                (dired-hide-details-mode 1)))

  (put 'dired-find-alternate-file 'disabled nil)

  ;;(add-hook 'dired-mode-hook #'dired-du-mode)
#+END_SRC
* Ibuffer
manage several buffers interactively
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (add-hook 'ibuffer-mode-hook 'ibuffer-vc-set-filter-groups-by-vc-root)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'my/magit-prefix-key)
  (global-set-key (kbd "C-c m") 'my/magit-prefix-key)

  (define-key my/magit-prefix-key (kbd "s") 'magit-status)
  (define-key my/magit-prefix-key (kbd "d") 'magit-dispatch)
  (define-key my/magit-prefix-key (kbd "c") 'magit-clone)
  (define-key my/magit-prefix-key (kbd "i") 'magit-init)

  (setq magit-completing-read-function 'ivy-completing-read)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (with-eval-after-load 'company
      (setq company-echo-delay 0   ; disable the delay
        company-idle-delay 0
        company-tooltip-limit 10
        company-tooltip-align-annotations t
        company-minimum-prefix-length 2))
#+END_SRC
* Web Development

** Emmet
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'emmet-mode
    (setq emmet-move-cursor-between-quotes t      ;  cursor to be positioned between first empty quotes after expanding
          emmet-expand-jsx-className? nil
          emmet-self-closing-tag-style " /"))
#+END_SRC
** CSS
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  ;; Remap css-lookup-symbol to fix global counsel-mode key rebindings
  (add-hook 'css-mode-hook
            (lambda () (define-key css-mode-map (kbd "C-h S") 'css-lookup-symbol)))

#+END_SRC

** HTML
#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook (lambda ()(setq emmet-indentation 2)))
#+END_SRC

** Web Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'emmet-mode)

  (add-to-list 'auto-mode-alist '("/templates/.*\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(handlebars\\|hbs\\)\\'" . web-mode))

  (with-eval-after-load 'web-mode
    (setq	web-mode-engines-alist
	  '(("handlebars"    . "\\.handlebars\\'")
	    ("django" . "./templates/.*\\.html?\\'"))
	  web-mode-content-types-alist
	  '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'")))

    (setq web-mode-enable-css-colorization t
	  web-mode-enable-current-element-highlight t
	  web-mode-enable-current-column-highlight t
	  web-mode-markup-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-enable-auto-closing t
	  web-mode-enable-auto-opening t
	  web-mode-enable-auto-pairing nil
	  web-mode-enable-auto-indentation nil
	  web-mode-enable-auto-quoting t
	  web-mode-enable-html-entities-fontification t))

#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (defalias 'workon 'pyvenv-workon)

  (setq python-shell-interpreter "python3"
        elpy-rpc-python-command "python3"
        python-shell-interpreter-args "-i")

  (defun elpy-django-command (cmd)
    "Prompt user for Django command. If called with `C-u',
      it will prompt for other flags/arguments to run."
    (interactive (list (completing-read "Command: " (elpy-django--get-commands) nil nil)))
    ;; Called with C-u, variable is set or is a cmd that requires an argument
    (when (or current-prefix-arg
              elpy-django-always-prompt
              (member cmd elpy-django-commands-with-req-arg))
      (setq cmd (concat cmd " " (read-shell-command (concat cmd ": ") "--noinput"))))
    (if (string= cmd "shell")
        (run-python (concat elpy-django-command " " cmd " -i python")
                    t t)
      (compile (concat elpy-django-command " " cmd))))
#+END_SRC

* Javascript
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2
        js2-highlight-level 3
        js-chain-indent t)

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode)) ; hook it in for shell scripts running via node.js
#+END_SRC

* Scheme
#+begin_src emacs-lisp
  (setq geiser-mode-auto-p nil) ; don't automatically load geiser in scheme buffers

  (with-eval-after-load 'geiser-guile
    (add-to-list 'geiser-guile-load-path "~/src/guix"))


  ;; Set up for Skribilo files
  (add-to-list 'auto-mode-alist '("\\.skr\\'" . scheme-mode))
  (autoload 'skribe-mode "skribe.el" "Skribe mode." t)
#+end_src

* C
[[https://www.emacswiki.org/emacs/AaronL][Copy paste from here]]
#+BEGIN_SRC emacs-lisp
  (setq-default c-indent-tabs-mode t     ; Pressing TAB should cause indentation
		  c-indent-level 4       ; A TAB is equivilent to four spaces
		  c-argdecl-indent 0     ; Do not indent argument decl's extra
		  c-tab-always-indent t
		  backward-delete-function nil) ; DO NOT expand tabs when deleting
  (c-add-style "my-c-style" '((c-continued-statement-offset 4))) ; If a statement continues on the next line, indent the continuation by 4
  (defun my-c-mode-hook ()
    (c-set-style "my-c-style")
    (c-set-offset 'substatement-open '0) ; brackets should be at same indentation level as the statements they open
    (c-set-offset 'inline-open '+)
    (c-set-offset 'block-open '+)
    (c-set-offset 'brace-list-open '+)   ; all "opens" should be indented by the c-indent-level
    (c-set-offset 'case-label '+))       ; indent case labels by c-indent-level, too
  (add-hook 'c-mode-hook 'my-c-mode-hook)

  ;; GGTAGS
  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; activated for other languages as well
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode 'js-mode)
                (ggtags-mode 1))))

  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

* Org
#+begin_src emacs-lisp
  (global-set-key (kbd "<f6>") 'org-capture)

  ;; TODO Setup later
  ;; :map org-mode-map
  ;; ("s-j o" . counsel-org-goto)
  ;; ("s-j j" . counsel-org-goto-all)
  ;; ("s-f" . counsel-org-file)
  ;; ("s-r" . avy-org-refile-as-child)
  ;; ("s-i" . my/copy-id-to-clipboard)

  (with-eval-after-load 'org
    (visual-line-mode 1) ; wrap lines
    (setq org-src-fontify-natively t    ; highlight syntax in code source blocks
          ;; org-ditaa-jar-path "~/.emacs.d/ditaa-0.11.0-standalone.jar"
          org-latex-pdf-process
          (let
              ;; https://tex.stackexchange.com/questions/2099/how-to-include-svg-diagrams-in-latex
              ((cmd (concat "lualatex -interaction=nonstopmode --shell-escape"
                            " --synctex=1"
                            ;; https://tex.stackexchange.com/questions/124246/uninformative-error-message-when-using-auctex
                            "--file-line-error"
                            " -output-directory %o %f")))
            (list cmd
                  "cd %o; if test -r %b.idx; then makeindex %b.idx; fi"
                  "cd %o; bibtex %b"
                  cmd
                  cmd))
          )
    )


  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (latex . t)
     (python . t)
     (ditaa . t)))
#+end_src
* PDF Tools
#+BEGIN_SRC emacs-lisp
  (pdf-loader-install)
#+END_SRC
* Circe
Client for IRC
#+begin_src emacs-lisp
  (setq circe-network-options
        '(("Freenode"
        ;;   :tls t
      ;;     :nick "my-nick"
    ;;       :sasl-username "my-nick"
  ;;         :sasl-password "my-password"
          ;; :channels ("#emacs-circe")
           )))
#+end_src
* Extras
Nice to have packages and functionality
**  Already in Emacs
*** Misc
 #+begin_src emacs-lisp
   (show-paren-mode t) ; toggle highlighting matching paren

   (electric-layout-mode 1)  ; adds electricity after inserting chars e.g. in  js ';' starts new line

   (electric-indent-mode +1) ; toggle on the fly re-indentation

   ;; Electric Pairs
   (add-hook 'mhtml-mode-hook 'electric-pair-local-mode)
   (add-hook 'emacs-lisp-mode-hook 'electric-pair-local-mode)
   (add-hook 'clojure-mode-hook 'electric-pair-local-mode)
   (add-hook 'lisp-interaction-mode-hook 'electric-pair-local-mode)
   (add-hook 'web-mode-hook 'electric-pair-local-mode)
   (add-hook 'ielm-mode-hook 'electric-pair-local-mode)
   (add-hook 'js-mode-hook 'electric-pair-local-mode)
   (add-hook 'org-mode-hook 'electric-pair-local-mode)
   (add-hook 'scheme-mode-hook 'electric-pair-local-mode)
   (add-hook 'python-mode-hook 'electric-pair-local-mode)
   (add-hook 'css-mode-hook 'electric-pair-local-mode)
   (add-hook 'less-css-mode-hook 'electric-pair-local-mode)

   ;; add extra pairs for org mode
   (defvar org-electric-pairs '((?/ . ?/) (?= . ?=)) "Electric pairs for org-mode.")
   (defun org-add-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
     (setq-local electric-pair-text-pairs electric-pair-pairs))
   (add-hook 'org-mode-hook 'org-add-electric-pairs)

   ;; add extra pairs for js-mode
   (defvar js-mode-electric-pairs '((?` . ?`)) "Electric pairs for js-mode.")
   (defun js-mode-add-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs js-mode-electric-pairs))
     (setq-local electric-pair-text-pairs electric-pair-pairs))
   (add-hook 'js-mode-hook 'js-mode-add-electric-pairs)
   (add-hook 'mhtml-mode-hook 'js-mode-add-electric-pairs) ; needs it for `script` tags

   ;; add extra pairs for web mode (jinja)
   (defvar web-mode-jinja-electric-pairs '((?% . ?%) (?< . ?>)) "Electric pairs for web-mode.")
   (defun web-mode-add-jinja-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs web-mode-jinja-electric-pairs)))
   (add-hook 'web-mode-hook 'web-mode-add-jinja-electric-pairs)

   ;; Subword Mode
   (add-hook 'js-mode-hook 'subword-mode)
   (add-hook 'c-mode-hook 'subword-mode)
   (add-hook 'c++-mode-hook 'subword-mode)
   (add-hook 'clojure-mode-hook 'subword-mode)
 #+end_src

*** Prettify Symbols
  #+BEGIN_SRC emacs-lisp
    (global-prettify-symbols-mode t)

    (defun my-add-pretty-lambda ()
        "Make some word or string show as pretty Unicode symbols"
        (push '("lambda" . 955) prettify-symbols-alist)	      ; λ
        (push '("->" . 8594) prettify-symbols-alist)              ; →
        (push '("=>" . 8658) prettify-symbols-alist)              ; ⇒
        (push '("map" . 8614) prettify-symbols-alist) 	      ; ↦
	        )

    (add-hook 'tex-mode-hook 'my-add-pretty-lambda)

    (add-hook 'js-mode-hook (lambda ()
			      "Beautify Javascript Keywords"
			      (my-add-pretty-lambda)))

    (add-hook 'org-mode-hook (lambda ()
			       "Beautify Org Checkbox Symbol"
			       (push '("[ ]" .  "▢") prettify-symbols-alist)
			       (push '("*" .  "◉") prettify-symbols-alist)
			       (push '("[X]" . "☑" ) prettify-symbols-alist)
			       (push '("[-]" . "❍" ) prettify-symbols-alist)))

    (add-hook 'emacs-lisp-mode-hook
	      (lambda ()
	        "Beautify Emacs Symbols"
	        (push '("<=" . "≤") prettify-symbols-alist)))
  #+END_SRC
** Not included in Emacs by default
*** Iedit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'iedit-mode)
#+end_src
*** Rainbow Delimiters
 #+begin_src emacs-lisp
   (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'lisp-interaction-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)

   (custom-set-faces
          '(rainbow-delimiters-depth-1-face ((t (:foreground "black"))))
          '(rainbow-delimiters-depth-2-face ((t (:foreground "red"))))
          '(rainbow-delimiters-depth-3-face ((t (:foreground "cyan3"))))
          '(rainbow-delimiters-depth-4-face ((t (:foreground "blue"))))
          '(rainbow-delimiters-depth-5-face ((t (:foreground "gold"))))
          '(rainbow-delimiters-depth-6-face ((t (:foreground "lavender"))))
          '(rainbow-delimiters-depth-7-face ((t (:foreground "black"))))
          '(rainbow-delimiters-depth-8-face ((t (:foreground "magenta"))))
          '(rainbow-delimiters-depth-9-face ((t (:foreground "red")))))
 #+end_src
*** Multiple Cursors
#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
** Abbrev Setup
#+begin_src emacs-lisp
  (setq my-abbreviations "ABBREVPATH")
  (setenv my-abbreviations "~/my-sys-setup/my-abbrevs.el")
  (load (getenv my-abbreviations))
#+end_src

* Elisp lessons
#+begin_src emacs-lisp
  ;; From Emacs Lisp Intro
  ;;; =========================== ============== ============ =========== =====
  ;; (defun my/check-buffer-exists (name)
  ;;   "Send a message to echo area if buffer NAME exists."
  ;;   (interactive "sBuffer name: ")
  ;;   (if (get-buffer name)
  ;;       (message "The buffer %s exists" name)
  ;;     (message "Sorry, the buffer, %s, does not exist." name)))

  ;; ============================Elisp Confusion===============================
  ;; (defun my-first-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "P")
  ;;   (or number (setq number 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-second-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "p")
  ;;   (or number (setq number 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-third-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "P")
  ;;   (or number (setq (prefix-numeric-value number) 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-fourth-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "p")
  ;;   (or number (setq (prefix-numeric-value number) 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))
#+end_src
* Notes
** Using Emacs as a Database Client

   "First you have to associated an SQL file with a connection. While in some .sql file execute M-x sql-set-product and
   type postgres. Afterwards do M-x sql-set-sqli-buffer and select the name of the connection buffer you want to use
   (it’s probably called *SQL* if you have only one connection buffer). Now you’ll be able to use commands like
   sql-send-region (C-c C-r) from the .sql buffer and the code from the region will be executed in the associated
   connection buffer."

   [[https://emacsredux.com/blog/2013/06/13/using-emacs-as-a-database-client/][More..]]

*** tldr;
    1. =M-x sql-postgres=
    2. Enter DB credentials
    3. open a =.sql= file
    4. execute =M-x sql-set-product= and type =postgres=
    5. =M-x sql-set-sqli-buffer=
    6. select =*SQL*=
    7. use commands like =sql-send-region= (=C-c C-r=) from the .sql buffer

** On Ubuntu
   For Flask/Postgres Python needs =Psycopg2= so you need to run [[https://stackoverflow.com/a/41852419][these]] in Terminal before

** Debian Buster/Ubuntu
*** Setting up Python
   first [[https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-programming-environment-on-debian-10][setup debian]]

   basically you'll need:
   1. python3-pip
   2. build-essential libssl-dev libffi-dev python3-dev

   then you can:
   ~pip3 install --user virtualenvwrapper jedi rope black yapf autopep8 flake8~

**** Install required dev packages for Emacs elpy
     Run ~pip3 install --user virtualenvwrapper jedi rope
     black yapf autopep8 flake8~

**** Virtualenvwrapper vars
   #+begin_src shell
   export WORKON_HOME=$HOME/.virtualenvs
   export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
   export PROJECT_HOME=$HOME/Documents/Devel
   export VIRTUALENVWRAPPER_SCRIPT=$HOME/.local/bin/virtualenvwrapper.sh
   source $HOME/.local/bin/virtualenvwrapper_lazy.sh
   #+end_src

** Setting up Guix on Ubuntu
*** could not install guile locale warning
    place in ~.profile~
#+begin_src shell
export GUIX_LOCPATH="$HOME/.guix-profile/lib/locale"
#+end_src

*** including GUI icons in Gnome
    add in ~.profile~
#+begin_src shell
export XDG_DATA_DIRS="${GUIX_PROFILE}/share${XDG_DATA_DIRS:+:}$XDG_DATA_DIRS"
#+end_src

*** locales not being found issue
    in ~/etc/systemd/system/guix-daemon.service~, there should be a line
    that starts with ~Envionment=...~, this should read ~Envionment[filtered]=...~
