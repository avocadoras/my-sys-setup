#+STARTUP: overview hidestars
#+AUTHOR: nojrl
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :comments no :results silent

* Find File In Project 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c f" 'find-file-in-project))

#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c m") 'magit-status)
  ;; (setq magit-completing-read-function 'ivy-completing-read)
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'dired
    (dired-hide-details-mode 1)
    (setq dired-recursive-copies (quote always) ; “always” means no asking
	  dired-recursive-deletes (quote top) ; “top” means ask once
	  dired-dwim-target t))
#+END_SRC
* Ibuffer
manage several buffers interactively
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("dired" (mode . dired-mode))
		 ("org" (name . "^.*org$"))
		 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
		 ("web" (or (mode . web-mode)
			    (mode . scss-mode)
			    (mode . css-mode)
			    (mode . html-mode)
			    (mode . mhtml-mode)))
		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		 ("programming" (or (mode . python-mode)
				    (mode . c++-mode)
				    (mode . js-mode)
				    (mode . lisp-mode)
				    (mode . c-mode)
				    (mode . clojure-mode)))
		 ("emacs" (or (name . "^\\*scratch\\*$")
			      (name . "^\\*Messages\\*$")
			      (name . "^\\*Warnings\\*$")))))))

  (with-eval-after-load 'ibuffer
    (ibuffer-auto-mode 1)
    (ibuffer-switch-to-saved-filter-groups "default")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil
	  ;; Don't ask for confirmation to delete marked buffers
	  ibuffer-expert t))
#+END_SRC
* Web Development

** Emmet
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'emmet-mode
    (setq emmet-move-cursor-between-quotes t      ;  cursor to be positioned between first empty quotes after expanding
	  emmet-self-closing-tag-style " /"))
#+END_SRC

** CSS
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
#+END_SRC

** HTML
#+BEGIN_SRC emacs-lisp
  (add-hook 'mhtml-mode-hook 'emmet-mode)
#+END_SRC

** Web Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook (lambda () (setq emmet-expand-jsx-className? t)))   	; expand 'className="..."' instead of 'class="..."'

  (add-to-list 'auto-mode-alist '("/templates/.*\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(handlebars\\|hbs\\)\\'" . web-mode))

  (with-eval-after-load 'web-mode
    (setq	web-mode-engines-alist
	  '(("handlebars"    . "\\.handlebars\\'")
	    ("jinja" . "./templates/.*\\.html?\\'"))
	  web-mode-content-types-alist
	  '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'")))
  
    (setq web-mode-enable-css-colorization t
	  web-mode-enable-current-element-highlight t
	  web-mode-enable-current-column-highlight t
	  web-mode-markup-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-enable-auto-closing t
	  web-mode-enable-auto-opening t
	  web-mode-enable-auto-pairing nil
	  web-mode-enable-auto-indentation nil
	  web-mode-enable-auto-quoting t
	  web-mode-enable-html-entities-fontification t))

#+END_SRC

* Python 
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3"
	python-indent-offset 4)

  (elpy-enable)
#+END_SRC

* Javascript
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode)) ; hook it in for shell scripts running via node.js
  (setq js-indent-level 2
	js-chain-indent t)

#+END_SRC

* Prettify Symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)

  (defun my-add-pretty-lambda ()
      "Make some word or string show as pretty Unicode symbols"
      (push '("lambda" . 955) prettify-symbols-alist)	      ; λ
      (push '("->" . 8594) prettify-symbols-alist)              ; →
      (push '("=>" . 8658) prettify-symbols-alist)              ; ⇒
      (push '("map" . 8614) prettify-symbols-alist) 	      ; ↦
	      )

  (add-hook 'tex-mode-hook 'my-add-pretty-lambda)

  (add-hook 'js-mode-hook (lambda ()
			    "Beautify Javascript Keywords"
			    (my-add-pretty-lambda)))

  (add-hook 'org-mode-hook (lambda ()
			     "Beautify Org Checkbox Symbol"
			     (push '("[ ]" .  "▢") prettify-symbols-alist)
			     (push '("*" .  "◉") prettify-symbols-alist)
			     (push '("[X]" . "☑" ) prettify-symbols-alist)
			     (push '("[-]" . "❍" ) prettify-symbols-alist)))

  (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      "Beautify Emacs Symbols"
	      (push '("<=" . "≤") prettify-symbols-alist)))
#+END_SRC
* Custom Prefix Keys
Custom prefix keys for things I use often
#+BEGIN_SRC emacs-lisp
  
  ;; jump to file useful for opening imgs in html 'img' tag
  (global-set-key (kbd "<f8>") 'find-file-at-point)
  (global-set-key (kbd "<s-return>") 'delete-other-windows)

  ;; s-z for commonly used keys
  (define-prefix-command 'my-super-z-map)
  (global-set-key (kbd "s-z") 'my-super-z-map)

  (define-key my-super-z-map (kbd "f") 'counsel-rg)	   ; find in current working directory
  (define-key my-super-z-map (kbd "o") 'browse-url-at-point) ; open url


  (defun my-update-and-tangle-package-config ()
    "Meant to be used exclusively after editing `emacs-pkgs-config.org'."
    (interactive)
    (if (not (get-buffer "emacs-pkgs-config.org"))
    (message "You cannot call this function in this buffer.")
      (progn
    (save-buffer)
    (org-babel-tangle))))

  (define-prefix-command 'my-f9-key-map)
  (global-set-key (kbd "<f9>") 'my-f9-key-map)
  (define-key my-f9-key-map (kbd "<f9>") 'my-update-and-tangle-package-config)
#+END_SRC
* Elisp lessons
#+begin_src emacs-lisp
  ;; From Emacs Lisp Intro
  ;;; =========================== ============== ============ =========== =====
  ;; (defun my/check-buffer-exists (name)
  ;;   "Send a message to echo area if buffer NAME exists."
  ;;   (interactive "sBuffer name: ")
  ;;   (if (get-buffer name)
  ;;       (message "The buffer %s exists" name)
  ;;     (message "Sorry, the buffer, %s, does not exist." name)))

  ;; ============================Elisp Confusion===============================
  ;; (defun my-first-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "P")
  ;;   (or number (setq number 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-second-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "p")
  ;;   (or number (setq number 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-third-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "P")
  ;;   (or number (setq (prefix-numeric-value number) 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))

  ;; (defun my-fourth-optional-arg (&optional number)
  ;;   "Sends a message if `fill-column' is greater than or less than NUMBER."
  ;;   (interactive "p")
  ;;   (or number (setq (prefix-numeric-value number) 56))
  ;;   (if (>= number fill-column)
  ;;       (message "%d is greater than or equal to %d" number fill-column)
  ;;     (message "%d is less than %d" number fill-column)))
#+end_src
* Notes
** Using Emacs as a Database Client

   "First you have to associated an SQL file with a connection. While in some .sql file execute M-x sql-set-product and
   type postgres. Afterwards do M-x sql-set-sqli-buffer and select the name of the connection buffer you want to use
   (it’s probably called *SQL* if you have only one connection buffer). Now you’ll be able to use commands like
   sql-send-region (C-c C-r) from the .sql buffer and the code from the region will be executed in the associated
   connection buffer."

   [[https://emacsredux.com/blog/2013/06/13/using-emacs-as-a-database-client/][More..]]

*** tldr;
    1. =M-x sql-postgres=
    2. Enter DB credentials
    3. open a =.sql= file
    4. execute =M-x sql-set-product= and type =postgres=
    5. =M-x sql-set-sqli-buffer=
    6. select =*SQL*=
    7. use commands like =sql-send-region= (=C-c C-r=) from the .sql buffer

** On Ubuntu
   For Flask/Postgres Python needs =Psycopg2= so you need to run [[https://stackoverflow.com/a/41852419][these]] in Terminal before
